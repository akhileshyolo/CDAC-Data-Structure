Container - Vector
------------------

Vectors are same as dynamic arrays with the ability to resize itself automatically when an element is inserted or deleted, with their storage being handled automatically by the container. 

Vector elements are placed in contiguous storage so that they can be accessed and traversed using iterators. 

In vectors, data is inserted at the end. 
Inserting at the end takes differential time, as sometimes there may be a need of extending the array. 
Removing the last element takes only constant time because no resizing happens. 
Inserting and erasing at the beginning or in the middle is linear in time.


Certain functions associated with the vector are:

Iterators
---------
    begin() – Returns an iterator pointing to the first element in the vector
    end() – Returns an iterator pointing to the theoretical element that follows the last element in the vector
    rbegin() – Returns a reverse iterator pointing to the last element in the vector (reverse beginning). It moves from last to first element
    rend() – Returns a reverse iterator pointing to the theoretical element preceding the first element in the vector (considered as reverse end) 

Capacity
--------

    size() – Returns the number of elements in the vector.
    max_size() – Returns the maximum number of elements that the vector can hold.
    capacity() – Returns the size of the storage space currently allocated to the vector expressed as number of elements.
    resize() – Resizes the container so that it contains ‘g’ elements.
    empty() – Returns whether the container is empty.
    shrink_to_fit() – Reduces the capacity of the container to fit its size and destroys all elements beyond the capacity.
    reserve() – Requests that the vector capacity be at least enough to contain n elements.

Element access
--------------

    reference operator [g] – Returns a reference to the element at position ‘g’ in the vector
    at(g) – Returns a reference to the element at position ‘g’ in the vector
    front() – Returns a reference to the first element in the vector
    back() – Returns a reference to the last element in the vector
    data() – Returns a direct pointer to the memory array used internally by the vector to store its owned elements.

Modifiers
---------

    assign() – It assigns new value to the vector elements by replacing old ones
    push_back() – It push the elements into a vector from the back
    pop_back() – It is used to pop or remove elements from a vector from the back.
    insert() – It inserts new elements before the element at the specified position
    erase() – It is used to remove elements from a container from the specified position or range.
    swap() – It is used to swap the contents of one vector with another vector of same type and size.
    clear() – It is used to remove all the elements of the vector container
    emplace() – It extends the container by inserting new element at position
    emplace_back() – It is used to insert a new element into the vector container, the new element is added to the end of the vector

**********************************
Refer program container_vector.cpp
**********************************
============================================================

Queues 

Type of container adaptors which operate in a first in first out (FIFO) type of arrangement. 

Elements are inserted at the back (end) and are deleted from the front.

 
The functions supported by queue are :

    empty() – Returns whether the queue is empty.
    size() – Returns the size of the queue.
    queue::swap() –   Exchange the contents of two queues but the queues must be of same type, although sizes may differ.
    queue::emplace() – Insert a new element into the queue container, the new element is added to the end of the queue.
    queue::front() and queue::back() – front() function returns a reference to the first element of the queue. back() function returns a reference to the last element of the queue.
    push(g) and pop() – push() function adds the element ‘g’ at the end of the queue. pop() function deletes the first element of the queue.

**********************************
Refer program container_queue.cpp
**********************************

============================================================

Set
---

Sets are a type of associative containers in which each element has to be unique, because the value of the element identifies it. 
The value of the element cannot be modified once it is added to the set, though it is possible to remove and add the modified value of that element.

Some useful functions associated with Set:

    begin() – Returns an iterator to the first element in the set.
    end() – Returns an iterator to the theoretical element that follows last element in the set.
    size() – Returns the number of elements in the set.
    max_size() – Returns the maximum number of elements that the set can hold.
    empty() – Returns whether the set is empty.

    rbegin()– Returns a reverse iterator pointing to the last element in the container.
    rend()– Returns a reverse iterator pointing to the theoretical element right before the first element in the set container.

    insert(const g) – Adds a new element ‘g’ to the set.
    iterator insert(iterator position, const g) – Adds a new element ‘g’ at the position pointed by iterator.

    erase(iterator position) – Removes the element at the position pointed by the iterator.
    erase(const g)– Removes the value ‘g’ from the set.

    clear() – Removes all the elements from the set.
    
    key_comp() / value_comp() – Returns the object that determines how the elements in the set are ordered (‘<‘ by default).

    find(const g) – Returns an iterator to the element ‘g’ in the set if found, else returns the iterator to end.
    count(const g) – Returns 1 or 0 based on the element ‘g’ is present in the set or not.
    
    lower_bound(const g) – Returns an iterator to the first element that is equivalent to ‘g’ or definitely will not go before the element ‘g’ in the set.
    upper_bound(const g) – Returns an iterator to the first element that is equivalent to ‘g’ or definitely will go after the element ‘g’ in the set.
    equal_range()– The function returns an iterator of pairs. (key_comp). The pair refers to the range that includes all the elements in the container which have a key equivalent to k.
    emplace()– This function is used to insert a new element into the set container, only if the element to be inserted is unique and does not already exists in the set.
    emplace_hint()– Returns an iterator pointing to the position where the insertion is done. If the element passed in the parameter already exists, then it returns an iterator pointing to the position where the existing element is.
    swap()– This function is used to exchange the contents of two sets but the sets must be of same type, although sizes may differ.
    operator= – The ‘=’ is an operator in C++ STL which copies (or moves) a set to another set and set::operator= is the corresponding operator function.
    get_allocator()– Returns the copy of the allocator object associated with the set.

============================================================

Map
---

Maps are associative containers that store elements in a mapped fashion. Each element has a key value and a mapped value. No two mapped values can have same key values.

Usefule functions in map::

    map::begin() and end() – begin() returns an iterator to the first element in the map. end() returns an iterator to the theoretical element that follows last element in the map
    map rend() – Returns a reverse iterator pointing to the theoretical element right before the first key-value pair in the map(which is considered its reverse end).
    map rbegin() – Returns a reverse iterator which points to the last element of the map.

    map insert() – Insert elements with a particular key in the map container.
    map count() – Returns the number of matches to element with key value ‘g’ in the map.

    map::size() – Returns the number of elements in the map.
    map::empty() – Returns whether the map is empty.
    map::clear() in – Removes all the elements from the map.
    map::at() and map::swap()  at() function is used to return the reference to the element associated with the key k. swap() function is used to exchange the contents of two maps but the maps must be of same type, although sizes may differ.

    map equal_range() – Returns an iterator of pairs. 
    The pair refers to the bounds of a range that includes all the elements in the container which have a key equivalent to k.

    map erase() – Used to erase element from the container.


    map find() – Returns an iterator to the element with key value ‘g’ in the map if found, else returns the iterator to end.

    map emplace() – Inserts the key and its element in the map container.

    map max_size() – Returns the maximum number of elements a map container can hold.

    map upper_bound() – Returns an iterator to the first element that is equivalent to mapped value with key value ‘g’ or definitely will go after the element with key value ‘g’ in the map
    map lower_bound() – Returns an iterator to the first element that is equivalent to mapped value with key value ‘g’ or definitely will not go before the element with key value ‘g’ in the map.

    map operator= – Assigns contents of a container to a different container, replacing its current content.
    map::operator[] – This operator is used to reference the element present at position given inside the operator.

    map value_comp() – Returns the object that determines how the elements in the map are ordered (‘<' by default).
    map key_comp() – Returns the object that determines how the elements in the map are ordered (‘<' by default).



============================================================
Difference between insert and emplace
-------------------------------------

#include <iostream>
#include <vector>

class Example
{
public:

    // bogus parameters to help illustrate the idea
    Example(const char *, int)
    {
    }
};

int main()
{
    std::vector<Example> ve;
    Example e("Example object 1", 1);

    ve.push_back(e);
    ve.push_back(Example("Example object 2", 2));
    ve.emplace_back("Example object 3", 3);
}


The emplace() functions are variadic template functions, a new feature of C++11. So they can take an arbitrary number of parameters (of different types) to then feed them to a constructor.

============================================================

Day1 :: Assignment – Lab:
 
1.  Find the number of students who have passed or failed using MAP.

    Hint: roll number and score 
         Passing criteria
	 counting
	 printing/displaying result

2.  Use Set from STL or otherwise and write a program to list prime numbers upto n(given input)




============================================================

Session 3 & 4: Problem Solving & Computational Thinking
Lecture

Define the problem
  Identify the problem
  Introduction to Problem Solving
  Problem solving basics
  Defining creativity v/s innovation

Find Creative Solutions using creativity tools
  Effective problem solving approaches
  Critical thinking and information analysis
  Brainstorming, Reverse Brainstorming, Imagineering, Mind Mapping,
  Six Thinking Hats: A Tool to Strengthen Critical Thinking, Collaboration, Communication, and Creativity Skills
  Analyzing the situation, Gathering information, Identifying solution criteria
  Decision Making Methods
  Charts and Diagrams
  Applying outcome-based thinking
 
Evaluate and Select solution
  Pro’s and Con’s, Force field analysis, Feasibility/Capability Analysis,
  Decision analysis, evaluating problems
  Choosing among alternatives
  Qualitative analysis, discussing qualitative analysis techniques
  Establishing objectives
  Assigning weight to objectives in order to make the best decision
  Creating a satisfaction scale to choose between alternatives

Implementing Decisions
  Create an action plan
  Break solution into action steps
  Prioritize actions and assign roles (setting priorities for taking action)
  Follow-up at milestones
============================================================================

Define the problem
==================
  Identify the problem
  =========================
  Introduction to Problem Solving
  =========================
  Problem solving basics
  =========================
  Creativity and Innovation
  =========================

Definition of Creativity

	Creativity is the characteristic (ability) of a person to generate new ideas, alternatives, solutions, and possibilities in a unique and different way.

	It is not genetic 
	Can be developed by learning and comprehending things with a rare and exclusive perception 
	Creativity is a brainstorming and mind-blogging activity
	Person has to think beyond his imagination in order to unveil something which was previously hidden.

Definition of Innovation

	Innovation is an act of application of new ideas to which creates some value for the business organization, government, and society as well. 
	Better and smarter way of doing anything is innovation. 

    	New technology.
    	New product line or segment.
    	A new method of production.
    	An improvement in the existing product.

Innovation is closely tied to creativity i.e. putting creative ideas into action is an innovation, whose consequences should be positive. 
It is the process of doing something better for the first time, which was not previously done by any entity. 
It can also be termed as a change which can bring a new edge to the performance and productivity of the company.
It is of two types i.e. evolutionary and revolutionary.

Basis for Comparison		Creativity		Innovation

Process				Imaginative		Productive
Quantifiable			No			Yes
Related to			Thinking something new	Introducing something new
Money Consumption		No			Yes
Risk				No			Yes

